#!/bin/bash
source /opt/configuration/set_defaults.sh

# Check if username is provided when USE_CLIENT_CERTIFICATE is true
if [ "${USE_CLIENT_CERTIFICATE}" == "true" ] && [ -z "$1" ]; then
    echo "Error: Username must be provided as an argument when USE_CLIENT_CERTIFICATE is true." >&2
    exit 1
fi

USERNAME="$1"

if [ ! -f "$PKI_DIR/private/server.key" ]; then
    echo >&2
    echo "**" >&2
    echo "The server key wasn't found, which means that something's" >&2
    echo "gone wrong with generating the certificates.  Try running" >&2
    echo "the container again with the REGENERATE_CERTS environmental" >&2
    echo "variable set to 'true'" >&2
    echo "**" >&2
    echo >&2
    exit 1
fi

# Base configuration
cat << EOF
client
tls-client
dev tun
persist-key
persist-tun
remote-cert-tls server
key-direction 1
auth SHA512
auth-nocache
proto $OVPN_PROTOCOL
reneg-sec 0
EOF

# Routes configuration
if [ "${OVPN_ROUTES}x" == "x" ] ; then
    echo "redirect-gateway def1"
fi

# Authentication method
if [ "${USE_CLIENT_CERTIFICATE}" != "true" ] ; then
    echo "auth-user-pass"
fi

# DNS configuration
if [ "${OVPN_DNS_SERVERS}x" != "x" ] ; then
    cat << EOF

##Un-comment these lines when using Linux
##in order to set the DNS server:
## If your Linux distro uses systemd-resolved:
#script-security 2
#up /etc/openvpn/update-systemd-resolved
#down /etc/openvpn/update-systemd-resolved

## Otherwise:
#script-security 2
#up /etc/openvpn/update-resolv-conf
#down /etc/openvpn/update-resolv-conf
EOF
    IFS=',' read -r -a nameservers <<< "$OVPN_DNS_SERVERS"
fi

# Windows DNS registration
if [ "${OVPN_REGISTER_DNS}" == "true" ]; then 
    echo "register-dns"
fi 

# Main configuration
cat << EOF
# Set log file verbosity
verb $OVPN_VERBOSITY
<connection>
remote $OVPN_SERVER_CN $OVPN_PORT $OVPN_PROTOCOL
float
nobind
</connection>
<ca>
$(cat $PKI_DIR/ca.crt)
</ca>
<tls-auth>
$(cat $PKI_DIR/ta.key)
</tls-auth>
key-direction 1
EOF

# Client certificate configuration
if [ "${USE_CLIENT_CERTIFICATE}" == "true" ] ; then
    if [ ! -f "$PKI_DIR/private/${USERNAME}.key" ] || [ ! -f "$PKI_DIR/issued/${USERNAME}.crt" ] ; then
        echo "Error: Client certificate for $USERNAME not found." >&2
        echo "Please generate it using:" >&2
        echo "docker exec /opt/easyrsa/easyrsa build-client-full $USERNAME nopass" >&2
        exit 1
    else 
        cat << EOF
<cert>
$(cat $PKI_DIR/issued/${USERNAME}.crt)
</cert>
<key>
$(cat $PKI_DIR/private/${USERNAME}.key)
</key>
EOF
    fi
fi
